// ==============================

// Комментарии к задачам task 01

// 1 ==============================

var x = 5; // Переменной 'x' присваивается значение простого типа
var y = x; // Присваиваем переменную простого типа 'х' в другую переменную 'y'

// Произошло копирование значения и в результате обе переменные хранят не связанные между собой значения 5

x = 25; // Изменяем значение одной из переменных

console.log(x); // 25
console.log(y); // 5

// 2 ==============================

// Переменной 'arr' присваивается значение составного типа,
// но переменная хранит не само значение, а адресс его места в памяти - ссылку на значение
var arr = [1, 2, 3, 4, 5];

// Присваиваем переменную составного типа 'arr' в другую переменную 'newArr'
var newArr = arr;

// Произошло копирование ссылки на значение и в результате обе переменные 
// обращаются к одному и тому же значению.
// Так как значение одно, то изменения через любую переменную видны в других переменных.
// Изменяем значение newArr - удаляем первый элемент
newArr.shift();

console.log(arr); // [2, 3, 4, 5] 
console.log(newArr); // [2, 3, 4, 5] 

// 3 ==============================

// Переменной 'arr' присваивается значение составного типа,
// но переменная хранит не само значение, а адресс его места в памяти - ссылку на значение
var arr = [1, 2, 3, 4, 5];

// Присваиваем переменную составного типа 'arr' в другую переменную 'newArr'
var newArr = arr;

// Произошло копирование ссылки на значение и в результате обе переменные 
// обращаются к одному и тому же значению.
// Так как значение одно, то изменения через любую переменную видны в других переменных.

// Присваиваем переменной 'arr' новое значение -
// то-есть убрали с неё ссылку на массив [1, 2, 3, 4, 5] и присвоили в неё 0.
// При этом массив по-прежнему существует в памяти
arr = 0;

console.log(arr); // 0
console.log(newArr); // [1, 2, 3, 4, 5]

// 4 ========================

// Переменной 'obj' присваивается значение составного типа,
// но переменная хранит не само значение, а адресс его места в памяти - ссылку на значение
var obj = { a: 1 };

// Присваиваем переменную составного типа 'obj' в другую переменную 'newObj'
var newObj = obj;

// Произошло копирование ссылки на значение и в результате обе переменные 
// обращаются к одному и тому же значению.
// Так как значение одно, то изменения через любую переменную видны в других переменных.
// Изменяем значение newObj
newObj.a = 25;

console.log(obj); // { a: 25 }
console.log(newObj); // { a: 25 }

// 9 ==============================

// Переменной 'obj' присваивается значение составного типа,
// но переменная хранит не само значение, а адресс его места в памяти - ссылку на значение.
// Назовем { key: 5 } - оригинальным объектом
let obj = { key: 5 };

function addTwo(obj) {
	// obj внутри ф-ции - это локальная переменная, в которую была передана ссылка на оригинальный объект.
	// При попытке изменения свойства key локальной переменной - произойдет изменение оригинального объекта,
	// так как локальная переменная содержит ссылку на оригинальный объект
	obj.key = obj.key + 2;

	// Локальная переменная obj - имеет больший приоритет, 
	// чем глобальная переменная obj, объявленная за пределами ф-ции.
	// Поэтому при попытке присвоения нового значения в obj - 
	// изменитья лишь значение локальной переменной
	obj = null; 
}

// Вызываем ф-цию, передавая в неё obj - то-есть ссылку на оригинальный объект
addTwo(obj);
console.log(obj); // { key: 7 }

// ========================